package ar.com.codoacodo.repository;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.util.List;

import javax.management.StandardEmitterMBean;


import ar.com.codoacodo.entity.Orador;

public class MysqlOradorRepository implements OradorRepository{


	public void save(Orador orador) {
		// 1 obtengo la conexion
		Connection con = AdministradorDeConexiones.getConnection();
		
		// 2 preparo sql
		String sql = "insert into oradores (nombre, apellido, tema, email, fecha_alta) values (?,?,?,?,?)";
		
		try {
			PreparedStatement statement = con.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
			statement.setString(1,orador.getNombre());
			statement.setString(2, orador.getApellido());
			statement.setString(3, orador.getTema());
			statement.setString(4, orador.getMail());
			statement.setDate(5, new java.sql.Date(System.currentTimeMillis() ));		// TAREA PASAR DE LOCALDATE A java.sql.Date
			
			statement.executeUpdate(); // INSERT / UPDATE / DELETE
			
			ResultSet res = statement.getGeneratedKeys();
			
			if( res.next() ) {
				Long id = res.getLong(1);	// aca esta el id
				orador.setId(id);
			}
			
		}catch(Exception e) {
			throw new IllegalArgumentException("No se pudo crear el orador: ",e);
		}
	}

	
	public Orador getById(Long id) {
		// 1 obtengo la conexion
		Connection con = AdministradorDeConexiones.getConnection();
		
		// 2 preparo sql
		String sql = "select nombre, apellido, tema, mail, fecha_alta from oradores where id_orador = ?";
		
		Orador orador = null;
		
		try {
			PreparedStatement statement = con.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
			statement.setLong(1, id);
			
			ResultSet res = statement.executeQuery();  // SELECT
			
			if( res.next() ) {
				//Long dbId = res.getLong(1);
				String nombre = res.getString(1);
				String apellido = res.getString(2);
				String tema = res.getString(3);
				String email = res.getString(4);
				Date fechaAlta = res.getDate(5);
				
				orador = new Orador(id, nombre, apellido, email, tema, LocalDate.now() /*LocalDate.from( fechaAlta.toInstant()*/ ) );
			}
			
		}catch(Exception e) {
			throw new IllegalArgumentException("No se pudo encontrar el orador: ",e);
		}
		return null;
	}

	
	public void update(Orador orador) {
		
		
	}

	
	public void delete(Long id) {
		
		
	}

	
	public List<Orador> findAll() {
		
		return null;
	}

	
}
